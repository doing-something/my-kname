{"ast":null,"code":"import * as R from 'ramda';\nexport const isMatchAnyOf = (...checkers) => value => checkers.reduce((acc, f) => {\n  if (acc) return acc;\n  return f(value);\n}, false);\nexport const isEmpty = v => {\n  return v === undefined || v === null || typeof v === 'object' && Object.keys(v).length === 0 || typeof v === 'string' && v.trim().length === 0;\n};\n\nconst isValidEmailFormat = v => {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(v);\n};\n\nexport const lengthNotBetween = R.curry((min, max, v) => String(v).length < min || String(v).length > max);\n\nconst isNotValidEmailFormat = v => !isValidEmailFormat(v);\n\nexport const isDigitChar = v => String(v).search(/[^\\d]/) === -1;\n\nconst isNotBeginWith = char => v => String(v).substr(0, 1) !== char;\n\nexport const isSameValueWith = R.curry((target, v, vs) => {\n  if (!vs[target]) return false;\n  return vs[target].value === v;\n});\nexport const isDateTimeRange = v => {\n  const startDate = v.startDate,\n        endDate = v.endDate,\n        startTime = v.startTime,\n        endTime = v.endTime;\n  return startDate instanceof Date && endDate instanceof Date && typeof startTime === 'number' && typeof endTime === 'number';\n};\nexport const isEmail = v => !isNotValidEmailFormat(v);\nexport const isRequired = v => !isEmpty(v);\nexport const isTrue = v => !!v;\nexport const isNumber = v => !Number.isNaN(Number(v));\nexport const hasCheckedValue = arr => arr.length;\nexport const isSameWith = R.curry((target, v) => target === v);\nexport const lengthBetween = R.curry((min, max, v) => String(v).length >= min && String(v).length <= max);\nexport const isNotValidEmail = v => !isValidEmailFormat(v);\nexport const isPhoneNumber = v => !isMatchAnyOf(lengthNotBetween(10, 12), isNotBeginWith('0'))(v);","map":{"version":3,"sources":["/home/skyparci/work/project/your-kname/src/hooks/useValidation/rules.js"],"names":["R","isMatchAnyOf","checkers","value","reduce","acc","f","isEmpty","v","undefined","Object","keys","length","trim","isValidEmailFormat","re","test","lengthNotBetween","curry","min","max","String","isNotValidEmailFormat","isDigitChar","search","isNotBeginWith","char","substr","isSameValueWith","target","vs","isDateTimeRange","startDate","endDate","startTime","endTime","Date","isEmail","isRequired","isTrue","isNumber","Number","isNaN","hasCheckedValue","arr","isSameWith","lengthBetween","isNotValidEmail","isPhoneNumber"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,OAAnB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC,GAAGC,QAAJ,KAAiBC,KAAK,IAC9CD,QAAQ,CAACE,MAAT,CAAgB,CAACC,GAAD,EAAMC,CAAN,KAAY;AACxB,MAAID,GAAJ,EAAS,OAAOA,GAAP;AACT,SAAOC,CAAC,CAACH,KAAD,CAAR;AACH,CAHD,EAGG,KAHH,CADG;AAMP,OAAO,MAAMI,OAAO,GAAGC,CAAC,IAAI;AACxB,SACIA,CAAC,KAAKC,SAAN,IACAD,CAAC,KAAK,IADN,IAEC,OAAOA,CAAP,KAAa,QAAb,IAAyBE,MAAM,CAACC,IAAP,CAAYH,CAAZ,EAAeI,MAAf,KAA0B,CAFpD,IAGC,OAAOJ,CAAP,KAAa,QAAb,IAAyBA,CAAC,CAACK,IAAF,GAASD,MAAT,KAAoB,CAJlD;AAMH,CAPM;;AASP,MAAME,kBAAkB,GAAGN,CAAC,IAAI;AAC5B,QAAMO,EAAE,GAAG,uJAAX;AACA,SAAOA,EAAE,CAACC,IAAH,CAAQR,CAAR,CAAP;AACH,CAHD;;AAIA,OAAO,MAAMS,gBAAgB,GAAGjB,CAAC,CAACkB,KAAF,CAC5B,CAACC,GAAD,EAAMC,GAAN,EAAWZ,CAAX,KAAiBa,MAAM,CAACb,CAAD,CAAN,CAAUI,MAAV,GAAmBO,GAAnB,IAA0BE,MAAM,CAACb,CAAD,CAAN,CAAUI,MAAV,GAAmBQ,GADlC,CAAzB;;AAIP,MAAME,qBAAqB,GAAGd,CAAC,IAAI,CAACM,kBAAkB,CAACN,CAAD,CAAtD;;AACA,OAAO,MAAMe,WAAW,GAAGf,CAAC,IAAIa,MAAM,CAACb,CAAD,CAAN,CAAUgB,MAAV,CAAiB,OAAjB,MAA8B,CAAC,CAAxD;;AACP,MAAMC,cAAc,GAAGC,IAAI,IAAIlB,CAAC,IAAIa,MAAM,CAACb,CAAD,CAAN,CAAUmB,MAAV,CAAiB,CAAjB,EAAoB,CAApB,MAA2BD,IAA/D;;AAEA,OAAO,MAAME,eAAe,GAAG5B,CAAC,CAACkB,KAAF,CAAQ,CAACW,MAAD,EAASrB,CAAT,EAAYsB,EAAZ,KAAmB;AACtD,MAAI,CAACA,EAAE,CAACD,MAAD,CAAP,EAAiB,OAAO,KAAP;AACjB,SAAOC,EAAE,CAACD,MAAD,CAAF,CAAW1B,KAAX,KAAqBK,CAA5B;AACH,CAH8B,CAAxB;AAKP,OAAO,MAAMuB,eAAe,GAAGvB,CAAC,IAAI;AAAA,QACxBwB,SADwB,GACmBxB,CADnB,CACxBwB,SADwB;AAAA,QACbC,OADa,GACmBzB,CADnB,CACbyB,OADa;AAAA,QACJC,SADI,GACmB1B,CADnB,CACJ0B,SADI;AAAA,QACOC,OADP,GACmB3B,CADnB,CACO2B,OADP;AAGhC,SACIH,SAAS,YAAYI,IAArB,IACAH,OAAO,YAAYG,IADnB,IAEA,OAAOF,SAAP,KAAqB,QAFrB,IAGA,OAAOC,OAAP,KAAmB,QAJvB;AAMH,CATM;AAWP,OAAO,MAAME,OAAO,GAAG7B,CAAC,IAAI,CAACc,qBAAqB,CAACd,CAAD,CAA3C;AACP,OAAO,MAAM8B,UAAU,GAAG9B,CAAC,IAAI,CAACD,OAAO,CAACC,CAAD,CAAhC;AACP,OAAO,MAAM+B,MAAM,GAAG/B,CAAC,IAAI,CAAC,CAACA,CAAtB;AACP,OAAO,MAAMgC,QAAQ,GAAGhC,CAAC,IAAI,CAACiC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACjC,CAAD,CAAnB,CAAvB;AACP,OAAO,MAAMmC,eAAe,GAAGC,GAAG,IAAIA,GAAG,CAAChC,MAAnC;AACP,OAAO,MAAMiC,UAAU,GAAG7C,CAAC,CAACkB,KAAF,CAAQ,CAACW,MAAD,EAASrB,CAAT,KAAeqB,MAAM,KAAKrB,CAAlC,CAAnB;AACP,OAAO,MAAMsC,aAAa,GAAG9C,CAAC,CAACkB,KAAF,CACzB,CAACC,GAAD,EAAMC,GAAN,EAAWZ,CAAX,KAAiBa,MAAM,CAACb,CAAD,CAAN,CAAUI,MAAV,IAAoBO,GAApB,IAA2BE,MAAM,CAACb,CAAD,CAAN,CAAUI,MAAV,IAAoBQ,GADvC,CAAtB;AAGP,OAAO,MAAM2B,eAAe,GAAGvC,CAAC,IAAI,CAACM,kBAAkB,CAACN,CAAD,CAAhD;AACP,OAAO,MAAMwC,aAAa,GAAGxC,CAAC,IAC1B,CAACP,YAAY,CAACgB,gBAAgB,CAAC,EAAD,EAAK,EAAL,CAAjB,EAA2BQ,cAAc,CAAC,GAAD,CAAzC,CAAZ,CAA4DjB,CAA5D,CADE","sourcesContent":["import * as R from 'ramda';\n\nexport const isMatchAnyOf = (...checkers) => value =>\n    checkers.reduce((acc, f) => {\n        if (acc) return acc;\n        return f(value);\n    }, false);\n\nexport const isEmpty = v => {\n    return (\n        v === undefined ||\n        v === null ||\n        (typeof v === 'object' && Object.keys(v).length === 0) ||\n        (typeof v === 'string' && v.trim().length === 0)\n    );\n};\n\nconst isValidEmailFormat = v => {\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(v);\n};\nexport const lengthNotBetween = R.curry(\n    (min, max, v) => String(v).length < min || String(v).length > max,\n);\n\nconst isNotValidEmailFormat = v => !isValidEmailFormat(v);\nexport const isDigitChar = v => String(v).search(/[^\\d]/) === -1;\nconst isNotBeginWith = char => v => String(v).substr(0, 1) !== char;\n\nexport const isSameValueWith = R.curry((target, v, vs) => {\n    if (!vs[target]) return false;\n    return vs[target].value === v;\n});\n\nexport const isDateTimeRange = v => {\n    const { startDate, endDate, startTime, endTime } = v;\n\n    return (\n        startDate instanceof Date &&\n        endDate instanceof Date &&\n        typeof startTime === 'number' &&\n        typeof endTime === 'number'\n    );\n};\n\nexport const isEmail = v => !isNotValidEmailFormat(v);\nexport const isRequired = v => !isEmpty(v);\nexport const isTrue = v => !!v;\nexport const isNumber = v => !Number.isNaN(Number(v));\nexport const hasCheckedValue = arr => arr.length;\nexport const isSameWith = R.curry((target, v) => target === v);\nexport const lengthBetween = R.curry(\n    (min, max, v) => String(v).length >= min && String(v).length <= max,\n);\nexport const isNotValidEmail = v => !isValidEmailFormat(v);\nexport const isPhoneNumber = v =>\n    !isMatchAnyOf(lengthNotBetween(10, 12), isNotBeginWith('0'))(v);\n"]},"metadata":{},"sourceType":"module"}