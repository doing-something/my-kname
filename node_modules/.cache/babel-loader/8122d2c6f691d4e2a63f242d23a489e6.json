{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { FontManager, FONT_FAMILY_DEFAULT, OPTIONS_DEFAULTS } from \"@samuelmeuli/font-manager\";\nimport React, { PureComponent } from \"react\";\n/**\n * Return the fontId based on the provided font family\n */\n\nfunction getFontId(fontFamily) {\n  return fontFamily.replace(/\\s+/g, \"-\").toLowerCase();\n}\n\nvar FontPicker =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(FontPicker, _PureComponent); // Instance of the FontManager class used for managing, downloading and applying fonts\n\n\n  function FontPicker(props) {\n    var _this;\n\n    _classCallCheck(this, FontPicker);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FontPicker).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      expanded: false,\n      loadingStatus: \"loading\"\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"fontManager\", void 0);\n\n    var _this$props = _this.props,\n        apiKey = _this$props.apiKey,\n        activeFontFamily = _this$props.activeFontFamily,\n        pickerId = _this$props.pickerId,\n        families = _this$props.families,\n        categories = _this$props.categories,\n        scripts = _this$props.scripts,\n        variants = _this$props.variants,\n        limit = _this$props.limit,\n        sort = _this$props.sort,\n        onChange = _this$props.onChange;\n    var options = {\n      pickerId: pickerId,\n      families: families,\n      categories: categories,\n      scripts: scripts,\n      variants: variants,\n      limit: limit,\n      sort: sort\n    }; // Initialize FontManager object and generate font list\n\n    _this.fontManager = new FontManager(apiKey, activeFontFamily, options, onChange);\n\n    _this.fontManager.init().then(function () {\n      _this.setState({\n        loadingStatus: \"finished\"\n      });\n    })[\"catch\"](function (err) {\n      // On error: Log error message\n      _this.setState({\n        loadingStatus: \"error\"\n      });\n\n      console.error(\"Error trying to fetch the list of available fonts\");\n      console.error(err);\n    }); // Function bindings\n\n\n    _this.onClose = _this.onClose.bind(_assertThisInitialized(_this));\n    _this.onSelection = _this.onSelection.bind(_assertThisInitialized(_this));\n    _this.setActiveFontFamily = _this.setActiveFontFamily.bind(_assertThisInitialized(_this));\n    _this.toggleExpanded = _this.toggleExpanded.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * After every component update, check whether the activeFontFamily prop has changed. If so,\n   * call this.setActiveFontFamily with the new font\n   */\n\n\n  _createClass(FontPicker, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props2 = this.props,\n          activeFontFamily = _this$props2.activeFontFamily,\n          onChange = _this$props2.onChange; // If active font prop has changed: Update font family in font manager and component state\n\n      if (activeFontFamily !== prevProps.activeFontFamily) {\n        this.setActiveFontFamily(activeFontFamily);\n      } // If onChange prop has changed: Update onChange function in font manager\n\n\n      if (onChange !== prevProps.onChange) {\n        this.fontManager.setOnChange(onChange);\n      }\n    }\n    /**\n     * EventListener for closing the font picker when clicking anywhere outside it\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(e) {\n      var targetEl = e.target; // Clicked element\n\n      var fontPickerEl = document.getElementById(\"font-picker\".concat(this.fontManager.selectorSuffix)); // eslint-disable-next-line no-constant-condition\n\n      while (true) {\n        if (targetEl === fontPickerEl) {\n          // Click inside font picker: Exit\n          return;\n        }\n\n        if (targetEl.parentNode) {\n          // Click outside font picker: Move up the DOM\n          targetEl = targetEl.parentNode;\n        } else {\n          // DOM root is reached: Toggle picker, exit\n          this.toggleExpanded();\n          return;\n        }\n      }\n    }\n    /**\n     * Update the active font on font button click\n     */\n\n  }, {\n    key: \"onSelection\",\n    value: function onSelection(e) {\n      var target = e.target;\n      var activeFontFamily = target.textContent;\n\n      if (!activeFontFamily) {\n        throw Error(\"Missing font family in clicked font button\");\n      }\n\n      this.setActiveFontFamily(activeFontFamily);\n      this.toggleExpanded();\n    }\n    /**\n     * Set the specified font as the active font in the fontManager and update activeFontFamily in the\n     * state\n     */\n\n  }, {\n    key: \"setActiveFontFamily\",\n    value: function setActiveFontFamily(activeFontFamily) {\n      this.fontManager.setActiveFont(activeFontFamily);\n    }\n    /**\n     * Generate <ul> with all font families\n     */\n\n  }, {\n    key: \"generateFontList\",\n    value: function generateFontList(fonts) {\n      var _this2 = this;\n\n      var activeFontFamily = this.props.activeFontFamily;\n      var loadingStatus = this.state.loadingStatus;\n\n      if (loadingStatus !== \"finished\") {\n        return React.createElement(\"div\", null);\n      }\n\n      return React.createElement(\"ul\", null, fonts.map(function (font) {\n        var isActive = font.family === activeFontFamily;\n        var fontId = getFontId(font.family);\n        return React.createElement(\"li\", {\n          key: fontId\n        }, React.createElement(\"button\", {\n          type: \"button\",\n          id: \"font-button-\".concat(fontId).concat(_this2.fontManager.selectorSuffix),\n          className: isActive ? \"active-font\" : \"\",\n          onClick: _this2.onSelection,\n          onKeyPress: _this2.onSelection\n        }, font.family));\n      }));\n    }\n    /**\n     * Expand/collapse the picker's font list\n     */\n\n  }, {\n    key: \"toggleExpanded\",\n    value: function toggleExpanded() {\n      var expanded = this.state.expanded;\n\n      if (expanded) {\n        this.setState({\n          expanded: false\n        });\n        document.removeEventListener(\"click\", this.onClose);\n      } else {\n        this.setState({\n          expanded: true\n        });\n        document.addEventListener(\"click\", this.onClose);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          activeFontFamily = _this$props3.activeFontFamily,\n          sort = _this$props3.sort;\n      var _this$state = this.state,\n          expanded = _this$state.expanded,\n          loadingStatus = _this$state.loadingStatus; // Extract and sort font list\n\n      var fonts = Array.from(this.fontManager.getFonts().values());\n\n      if (sort === \"alphabet\") {\n        fonts.sort(function (font1, font2) {\n          return font1.family.localeCompare(font2.family);\n        });\n      } // Render font picker button and attach font list to it\n\n\n      return React.createElement(\"div\", {\n        id: \"font-picker\".concat(this.fontManager.selectorSuffix),\n        className: expanded ? \"expanded\" : \"\"\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"dropdown-button\",\n        onClick: this.toggleExpanded,\n        onKeyPress: this.toggleExpanded\n      }, React.createElement(\"p\", {\n        className: \"dropdown-font-family\"\n      }, activeFontFamily), React.createElement(\"p\", {\n        className: \"dropdown-icon \".concat(loadingStatus)\n      })), loadingStatus === \"finished\" && this.generateFontList(fonts));\n    }\n  }]);\n\n  return FontPicker;\n}(PureComponent);\n\n_defineProperty(FontPicker, \"defaultProps\", {\n  defaultFamily: FONT_FAMILY_DEFAULT,\n  pickerId: OPTIONS_DEFAULTS.pickerId,\n  families: OPTIONS_DEFAULTS.families,\n  categories: OPTIONS_DEFAULTS.categories,\n  scripts: OPTIONS_DEFAULTS.scripts,\n  variants: OPTIONS_DEFAULTS.variants,\n  limit: OPTIONS_DEFAULTS.limit,\n  sort: OPTIONS_DEFAULTS.sort,\n  onChange: function onChange() {}\n});\n\nexport { FontPicker as default };","map":null,"metadata":{},"sourceType":"module"}