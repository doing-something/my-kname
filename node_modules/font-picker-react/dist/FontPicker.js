function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { FontManager, FONT_FAMILY_DEFAULT, OPTIONS_DEFAULTS } from "@samuelmeuli/font-manager";
import React, { PureComponent } from "react";

/**
 * Return the fontId based on the provided font family
 */
function getFontId(fontFamily) {
  return fontFamily.replace(/\s+/g, "-").toLowerCase();
}

var FontPicker =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(FontPicker, _PureComponent);

  // Instance of the FontManager class used for managing, downloading and applying fonts
  function FontPicker(props) {
    var _this;

    _classCallCheck(this, FontPicker);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FontPicker).call(this, props));

    _defineProperty(_assertThisInitialized(_this), "state", {
      expanded: false,
      loadingStatus: "loading"
    });

    _defineProperty(_assertThisInitialized(_this), "fontManager", void 0);

    var _this$props = _this.props,
        apiKey = _this$props.apiKey,
        activeFontFamily = _this$props.activeFontFamily,
        pickerId = _this$props.pickerId,
        families = _this$props.families,
        categories = _this$props.categories,
        scripts = _this$props.scripts,
        variants = _this$props.variants,
        limit = _this$props.limit,
        sort = _this$props.sort,
        onChange = _this$props.onChange;
    var options = {
      pickerId: pickerId,
      families: families,
      categories: categories,
      scripts: scripts,
      variants: variants,
      limit: limit,
      sort: sort
    }; // Initialize FontManager object and generate font list

    _this.fontManager = new FontManager(apiKey, activeFontFamily, options, onChange);

    _this.fontManager.init().then(function () {
      _this.setState({
        loadingStatus: "finished"
      });
    })["catch"](function (err) {
      // On error: Log error message
      _this.setState({
        loadingStatus: "error"
      });

      console.error("Error trying to fetch the list of available fonts");
      console.error(err);
    }); // Function bindings


    _this.onClose = _this.onClose.bind(_assertThisInitialized(_this));
    _this.onSelection = _this.onSelection.bind(_assertThisInitialized(_this));
    _this.setActiveFontFamily = _this.setActiveFontFamily.bind(_assertThisInitialized(_this));
    _this.toggleExpanded = _this.toggleExpanded.bind(_assertThisInitialized(_this));
    return _this;
  }
  /**
   * After every component update, check whether the activeFontFamily prop has changed. If so,
   * call this.setActiveFontFamily with the new font
   */


  _createClass(FontPicker, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props2 = this.props,
          activeFontFamily = _this$props2.activeFontFamily,
          onChange = _this$props2.onChange; // If active font prop has changed: Update font family in font manager and component state

      if (activeFontFamily !== prevProps.activeFontFamily) {
        this.setActiveFontFamily(activeFontFamily);
      } // If onChange prop has changed: Update onChange function in font manager


      if (onChange !== prevProps.onChange) {
        this.fontManager.setOnChange(onChange);
      }
    }
    /**
     * EventListener for closing the font picker when clicking anywhere outside it
     */

  }, {
    key: "onClose",
    value: function onClose(e) {
      var targetEl = e.target; // Clicked element

      var fontPickerEl = document.getElementById("font-picker".concat(this.fontManager.selectorSuffix)); // eslint-disable-next-line no-constant-condition

      while (true) {
        if (targetEl === fontPickerEl) {
          // Click inside font picker: Exit
          return;
        }

        if (targetEl.parentNode) {
          // Click outside font picker: Move up the DOM
          targetEl = targetEl.parentNode;
        } else {
          // DOM root is reached: Toggle picker, exit
          this.toggleExpanded();
          return;
        }
      }
    }
    /**
     * Update the active font on font button click
     */

  }, {
    key: "onSelection",
    value: function onSelection(e) {
      var target = e.target;
      var activeFontFamily = target.textContent;

      if (!activeFontFamily) {
        throw Error("Missing font family in clicked font button");
      }

      this.setActiveFontFamily(activeFontFamily);
      this.toggleExpanded();
    }
    /**
     * Set the specified font as the active font in the fontManager and update activeFontFamily in the
     * state
     */

  }, {
    key: "setActiveFontFamily",
    value: function setActiveFontFamily(activeFontFamily) {
      this.fontManager.setActiveFont(activeFontFamily);
    }
    /**
     * Generate <ul> with all font families
     */

  }, {
    key: "generateFontList",
    value: function generateFontList(fonts) {
      var _this2 = this;

      var activeFontFamily = this.props.activeFontFamily;
      var loadingStatus = this.state.loadingStatus;

      if (loadingStatus !== "finished") {
        return React.createElement("div", null);
      }

      return React.createElement("ul", null, fonts.map(function (font) {
        var isActive = font.family === activeFontFamily;
        var fontId = getFontId(font.family);
        return React.createElement("li", {
          key: fontId
        }, React.createElement("button", {
          type: "button",
          id: "font-button-".concat(fontId).concat(_this2.fontManager.selectorSuffix),
          className: isActive ? "active-font" : "",
          onClick: _this2.onSelection,
          onKeyPress: _this2.onSelection
        }, font.family));
      }));
    }
    /**
     * Expand/collapse the picker's font list
     */

  }, {
    key: "toggleExpanded",
    value: function toggleExpanded() {
      var expanded = this.state.expanded;

      if (expanded) {
        this.setState({
          expanded: false
        });
        document.removeEventListener("click", this.onClose);
      } else {
        this.setState({
          expanded: true
        });
        document.addEventListener("click", this.onClose);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          activeFontFamily = _this$props3.activeFontFamily,
          sort = _this$props3.sort;
      var _this$state = this.state,
          expanded = _this$state.expanded,
          loadingStatus = _this$state.loadingStatus; // Extract and sort font list

      var fonts = Array.from(this.fontManager.getFonts().values());

      if (sort === "alphabet") {
        fonts.sort(function (font1, font2) {
          return font1.family.localeCompare(font2.family);
        });
      } // Render font picker button and attach font list to it


      return React.createElement("div", {
        id: "font-picker".concat(this.fontManager.selectorSuffix),
        className: expanded ? "expanded" : ""
      }, React.createElement("button", {
        type: "button",
        className: "dropdown-button",
        onClick: this.toggleExpanded,
        onKeyPress: this.toggleExpanded
      }, React.createElement("p", {
        className: "dropdown-font-family"
      }, activeFontFamily), React.createElement("p", {
        className: "dropdown-icon ".concat(loadingStatus)
      })), loadingStatus === "finished" && this.generateFontList(fonts));
    }
  }]);

  return FontPicker;
}(PureComponent);

_defineProperty(FontPicker, "defaultProps", {
  defaultFamily: FONT_FAMILY_DEFAULT,
  pickerId: OPTIONS_DEFAULTS.pickerId,
  families: OPTIONS_DEFAULTS.families,
  categories: OPTIONS_DEFAULTS.categories,
  scripts: OPTIONS_DEFAULTS.scripts,
  variants: OPTIONS_DEFAULTS.variants,
  limit: OPTIONS_DEFAULTS.limit,
  sort: OPTIONS_DEFAULTS.sort,
  onChange: function onChange() {}
});

export { FontPicker as default };
